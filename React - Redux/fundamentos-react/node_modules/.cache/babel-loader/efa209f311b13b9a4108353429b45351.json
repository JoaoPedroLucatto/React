{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar Compressed = require('./compress');\n\nvar Identity = require('./identity');\n/**\r\n * Stringfy the given AST `node`.\r\n *\r\n * Options:\r\n *\r\n *  - `compress` space-optimized output\r\n *  - `sourcemap` return an object with `.code` and `.map`\r\n *\r\n * @param {Object} node\r\n * @param {Object} [options]\r\n * @return {String}\r\n * @api public\r\n */\n\n\nmodule.exports = function (node, options) {\n  options = options || {};\n  var compiler = options.compress ? new Compressed(options) : new Identity(options); // source maps\n\n  if (options.sourcemap) {\n    var sourcemaps = require('./source-map-support');\n\n    sourcemaps(compiler);\n    var code = compiler.compile(node);\n    compiler.applySourceMaps();\n    var map = options.sourcemap === 'generator' ? compiler.map : compiler.map.toJSON();\n    return {\n      code: code,\n      map: map\n    };\n  }\n\n  var code = compiler.compile(node);\n  return code;\n};","map":{"version":3,"sources":["C:/Users/jpluc/Documents/React/Cursos/React/React - Redux/fundamentos-react/node_modules/@testing-library/jest-dom/node_modules/css/lib/stringify/index.js"],"names":["Compressed","require","Identity","module","exports","node","options","compiler","compress","sourcemap","sourcemaps","code","compile","applySourceMaps","map","toJSON"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAuB;AACtCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAIC,QAAQ,GAAGD,OAAO,CAACE,QAAR,GACX,IAAIR,UAAJ,CAAeM,OAAf,CADW,GAEX,IAAIJ,QAAJ,CAAaI,OAAb,CAFJ,CAHsC,CAOtC;;AACA,MAAIA,OAAO,CAACG,SAAZ,EAAuB;AACrB,QAAIC,UAAU,GAAGT,OAAO,CAAC,sBAAD,CAAxB;;AACAS,IAAAA,UAAU,CAACH,QAAD,CAAV;AAEA,QAAII,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiBP,IAAjB,CAAX;AACAE,IAAAA,QAAQ,CAACM,eAAT;AAEA,QAAIC,GAAG,GAAGR,OAAO,CAACG,SAAR,KAAsB,WAAtB,GACNF,QAAQ,CAACO,GADH,GAENP,QAAQ,CAACO,GAAT,CAAaC,MAAb,EAFJ;AAIA,WAAO;AAAEJ,MAAAA,IAAI,EAAEA,IAAR;AAAcG,MAAAA,GAAG,EAAEA;AAAnB,KAAP;AACD;;AAED,MAAIH,IAAI,GAAGJ,QAAQ,CAACK,OAAT,CAAiBP,IAAjB,CAAX;AACA,SAAOM,IAAP;AACD,CAxBD","sourcesContent":["\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar Compressed = require('./compress');\r\nvar Identity = require('./identity');\r\n\r\n/**\r\n * Stringfy the given AST `node`.\r\n *\r\n * Options:\r\n *\r\n *  - `compress` space-optimized output\r\n *  - `sourcemap` return an object with `.code` and `.map`\r\n *\r\n * @param {Object} node\r\n * @param {Object} [options]\r\n * @return {String}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(node, options){\r\n  options = options || {};\r\n\r\n  var compiler = options.compress\r\n    ? new Compressed(options)\r\n    : new Identity(options);\r\n\r\n  // source maps\r\n  if (options.sourcemap) {\r\n    var sourcemaps = require('./source-map-support');\r\n    sourcemaps(compiler);\r\n\r\n    var code = compiler.compile(node);\r\n    compiler.applySourceMaps();\r\n\r\n    var map = options.sourcemap === 'generator'\r\n      ? compiler.map\r\n      : compiler.map.toJSON();\r\n\r\n    return { code: code, map: map };\r\n  }\r\n\r\n  var code = compiler.compile(node);\r\n  return code;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}