{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveClass = toHaveClass;\n\nvar _utils = require(\"./utils\");\n\nfunction getExpectedClassNamesAndOptions(params) {\n  const lastParam = params.pop();\n  let expectedClassNames, options;\n\n  if (typeof lastParam === 'object') {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {\n      exact: false\n    };\n  }\n\n  return {\n    expectedClassNames,\n    options\n  };\n}\n\nfunction splitClassNames(str) {\n  if (!str) {\n    return [];\n  }\n\n  return str.split(/\\s+/).filter(s => s.length > 0);\n}\n\nfunction isSubset(subset, superset) {\n  return subset.every(item => superset.includes(item));\n}\n\nfunction toHaveClass(htmlElement, ...params) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);\n  const {\n    expectedClassNames,\n    options\n  } = getExpectedClassNamesAndOptions(params);\n  const received = splitClassNames(htmlElement.getAttribute('class'));\n  const expected = expectedClassNames.reduce((acc, className) => acc.concat(splitClassNames(className)), []);\n\n  if (options.exact) {\n    return {\n      pass: isSubset(expected, received) && expected.length === received.length,\n      message: () => {\n        const to = this.isNot ? 'not to' : 'to';\n        return (0, _utils.getMessage)(this, `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));\n      }\n    };\n  }\n\n  return expected.length > 0 ? {\n    pass: isSubset(expected, received),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));\n    }\n  } : {\n    pass: this.isNot ? received.length > 0 : false,\n    message: () => this.isNot ? (0, _utils.getMessage)(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [this.utils.matcherHint(`.toHaveClass`, 'element'), 'At least one expected class must be provided.'].join('\\n')\n  };\n}","map":{"version":3,"sources":["C:/Users/jpluc/Documents/React/Cursos/React/React - Redux/fundamentos-react/node_modules/@testing-library/jest-dom/dist/to-have-class.js"],"names":["Object","defineProperty","exports","value","toHaveClass","_utils","require","getExpectedClassNamesAndOptions","params","lastParam","pop","expectedClassNames","options","concat","exact","splitClassNames","str","split","filter","s","length","isSubset","subset","superset","every","item","includes","htmlElement","checkHtmlElement","received","getAttribute","expected","reduce","acc","className","pass","message","to","isNot","getMessage","join","utils","matcherHint","printExpected"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.toHaveClass = toHaveClass;\r\n\r\nvar _utils = require(\"./utils\");\r\n\r\nfunction getExpectedClassNamesAndOptions(params) {\r\n  const lastParam = params.pop();\r\n  let expectedClassNames, options;\r\n\r\n  if (typeof lastParam === 'object') {\r\n    expectedClassNames = params;\r\n    options = lastParam;\r\n  } else {\r\n    expectedClassNames = params.concat(lastParam);\r\n    options = {\r\n      exact: false\r\n    };\r\n  }\r\n\r\n  return {\r\n    expectedClassNames,\r\n    options\r\n  };\r\n}\r\n\r\nfunction splitClassNames(str) {\r\n  if (!str) {\r\n    return [];\r\n  }\r\n\r\n  return str.split(/\\s+/).filter(s => s.length > 0);\r\n}\r\n\r\nfunction isSubset(subset, superset) {\r\n  return subset.every(item => superset.includes(item));\r\n}\r\n\r\nfunction toHaveClass(htmlElement, ...params) {\r\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);\r\n  const {\r\n    expectedClassNames,\r\n    options\r\n  } = getExpectedClassNamesAndOptions(params);\r\n  const received = splitClassNames(htmlElement.getAttribute('class'));\r\n  const expected = expectedClassNames.reduce((acc, className) => acc.concat(splitClassNames(className)), []);\r\n\r\n  if (options.exact) {\r\n    return {\r\n      pass: isSubset(expected, received) && expected.length === received.length,\r\n      message: () => {\r\n        const to = this.isNot ? 'not to' : 'to';\r\n        return (0, _utils.getMessage)(this, `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));\r\n      }\r\n    };\r\n  }\r\n\r\n  return expected.length > 0 ? {\r\n    pass: isSubset(expected, received),\r\n    message: () => {\r\n      const to = this.isNot ? 'not to' : 'to';\r\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));\r\n    }\r\n  } : {\r\n    pass: this.isNot ? received.length > 0 : false,\r\n    message: () => this.isNot ? (0, _utils.getMessage)(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [this.utils.matcherHint(`.toHaveClass`, 'element'), 'At least one expected class must be provided.'].join('\\n')\r\n  };\r\n}"]},"metadata":{},"sourceType":"script"}