{"ast":null,"code":"/**\r\n * Module dependencies.\r\n */\nvar SourceMap = require('source-map').SourceMapGenerator;\n\nvar SourceMapConsumer = require('source-map').SourceMapConsumer;\n\nvar sourceMapResolve = require('source-map-resolve');\n\nvar fs = require('fs');\n\nvar path = require('path');\n/**\r\n * Expose `mixin()`.\r\n */\n\n\nmodule.exports = mixin;\n/**\r\n * Ensure Windows-style paths are formatted properly\r\n */\n\nconst makeFriendlyPath = function (aPath) {\n  return path.sep === \"\\\\\" ? aPath.replace(/\\\\/g, \"/\").replace(/^[a-z]:\\/?/i, \"/\") : aPath;\n};\n/**\r\n * Mixin source map support into `compiler`.\r\n *\r\n * @param {Compiler} compiler\r\n * @api public\r\n */\n\n\nfunction mixin(compiler) {\n  compiler._comment = compiler.comment;\n  compiler.map = new SourceMap();\n  compiler.position = {\n    line: 1,\n    column: 1\n  };\n  compiler.files = {};\n\n  for (var k in exports) compiler[k] = exports[k];\n}\n/**\r\n * Update position.\r\n *\r\n * @param {String} str\r\n * @api private\r\n */\n\n\nexports.updatePosition = function (str) {\n  var lines = str.match(/\\n/g);\n  if (lines) this.position.line += lines.length;\n  var i = str.lastIndexOf('\\n');\n  this.position.column = ~i ? str.length - i : this.position.column + str.length;\n};\n/**\r\n * Emit `str`.\r\n *\r\n * @param {String} str\r\n * @param {Object} [pos]\r\n * @return {String}\r\n * @api private\r\n */\n\n\nexports.emit = function (str, pos) {\n  if (pos) {\n    var sourceFile = makeFriendlyPath(pos.source || 'source.css');\n    this.map.addMapping({\n      source: sourceFile,\n      generated: {\n        line: this.position.line,\n        column: Math.max(this.position.column - 1, 0)\n      },\n      original: {\n        line: pos.start.line,\n        column: pos.start.column - 1\n      }\n    });\n    this.addFile(sourceFile, pos);\n  }\n\n  this.updatePosition(str);\n  return str;\n};\n/**\r\n * Adds a file to the source map output if it has not already been added\r\n * @param {String} file\r\n * @param {Object} pos\r\n */\n\n\nexports.addFile = function (file, pos) {\n  if (typeof pos.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;\n  this.files[file] = pos.content;\n};\n/**\r\n * Applies any original source maps to the output and embeds the source file\r\n * contents in the source map.\r\n */\n\n\nexports.applySourceMaps = function () {\n  Object.keys(this.files).forEach(function (file) {\n    var content = this.files[file];\n    this.map.setSourceContent(file, content);\n\n    if (this.options.inputSourcemaps !== false) {\n      var originalMap = sourceMapResolve.resolveSync(content, file, fs.readFileSync);\n\n      if (originalMap) {\n        var map = new SourceMapConsumer(originalMap.map);\n        var relativeTo = originalMap.sourcesRelativeTo;\n        this.map.applySourceMap(map, file, makeFriendlyPath(path.dirname(relativeTo)));\n      }\n    }\n  }, this);\n};\n/**\r\n * Process comments, drops sourceMap comments.\r\n * @param {Object} node\r\n */\n\n\nexports.comment = function (node) {\n  if (/^# sourceMappingURL=/.test(node.comment)) return this.emit('', node.position);else return this._comment(node);\n};","map":{"version":3,"sources":["C:/Users/jpluc/Documents/React/Cursos/React/React - Redux/fundamentos-react/node_modules/@testing-library/jest-dom/node_modules/css/lib/stringify/source-map-support.js"],"names":["SourceMap","require","SourceMapGenerator","SourceMapConsumer","sourceMapResolve","fs","path","module","exports","mixin","makeFriendlyPath","aPath","sep","replace","compiler","_comment","comment","map","position","line","column","files","k","updatePosition","str","lines","match","length","i","lastIndexOf","emit","pos","sourceFile","source","addMapping","generated","Math","max","original","start","addFile","file","content","Object","prototype","hasOwnProperty","call","applySourceMaps","keys","forEach","setSourceContent","options","inputSourcemaps","originalMap","resolveSync","readFileSync","relativeTo","sourcesRelativeTo","applySourceMap","dirname","node","test"],"mappings":"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","sourcesContent":["\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar SourceMap = require('source-map').SourceMapGenerator;\r\nvar SourceMapConsumer = require('source-map').SourceMapConsumer;\r\nvar sourceMapResolve = require('source-map-resolve');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\n\r\n/**\r\n * Expose `mixin()`.\r\n */\r\n\r\nmodule.exports = mixin;\r\n\r\n/**\r\n * Ensure Windows-style paths are formatted properly\r\n */\r\n\r\nconst makeFriendlyPath = function(aPath) {\r\n  return path.sep === \"\\\\\" ? aPath.replace(/\\\\/g, \"/\").replace(/^[a-z]:\\/?/i, \"/\") : aPath;\r\n}\r\n\r\n/**\r\n * Mixin source map support into `compiler`.\r\n *\r\n * @param {Compiler} compiler\r\n * @api public\r\n */\r\n\r\nfunction mixin(compiler) {\r\n  compiler._comment = compiler.comment;\r\n  compiler.map = new SourceMap();\r\n  compiler.position = { line: 1, column: 1 };\r\n  compiler.files = {};\r\n  for (var k in exports) compiler[k] = exports[k];\r\n}\r\n\r\n/**\r\n * Update position.\r\n *\r\n * @param {String} str\r\n * @api private\r\n */\r\n\r\nexports.updatePosition = function(str) {\r\n  var lines = str.match(/\\n/g);\r\n  if (lines) this.position.line += lines.length;\r\n  var i = str.lastIndexOf('\\n');\r\n  this.position.column = ~i ? str.length - i : this.position.column + str.length;\r\n};\r\n\r\n/**\r\n * Emit `str`.\r\n *\r\n * @param {String} str\r\n * @param {Object} [pos]\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.emit = function(str, pos) {\r\n  if (pos) {\r\n    var sourceFile = makeFriendlyPath(pos.source || 'source.css');\r\n\r\n    this.map.addMapping({\r\n      source: sourceFile,\r\n      generated: {\r\n        line: this.position.line,\r\n        column: Math.max(this.position.column - 1, 0)\r\n      },\r\n      original: {\r\n        line: pos.start.line,\r\n        column: pos.start.column - 1\r\n      }\r\n    });\r\n\r\n    this.addFile(sourceFile, pos);\r\n  }\r\n\r\n  this.updatePosition(str);\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * Adds a file to the source map output if it has not already been added\r\n * @param {String} file\r\n * @param {Object} pos\r\n */\r\n\r\nexports.addFile = function(file, pos) {\r\n  if (typeof pos.content !== 'string') return;\r\n  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;\r\n\r\n  this.files[file] = pos.content;\r\n};\r\n\r\n/**\r\n * Applies any original source maps to the output and embeds the source file\r\n * contents in the source map.\r\n */\r\n\r\nexports.applySourceMaps = function() {\r\n  Object.keys(this.files).forEach(function(file) {\r\n    var content = this.files[file];\r\n    this.map.setSourceContent(file, content);\r\n\r\n    if (this.options.inputSourcemaps !== false) {\r\n      var originalMap = sourceMapResolve.resolveSync(\r\n        content, file, fs.readFileSync);\r\n      if (originalMap) {\r\n        var map = new SourceMapConsumer(originalMap.map);\r\n        var relativeTo = originalMap.sourcesRelativeTo;\r\n        this.map.applySourceMap(map, file, makeFriendlyPath(path.dirname(relativeTo)));\r\n      }\r\n    }\r\n  }, this);\r\n};\r\n\r\n/**\r\n * Process comments, drops sourceMap comments.\r\n * @param {Object} node\r\n */\r\n\r\nexports.comment = function(node) {\r\n  if (/^# sourceMappingURL=/.test(node.comment))\r\n    return this.emit('', node.position);\r\n  else\r\n    return this._comment(node);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}